// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                      Int      @id @default(autoincrement())
  name                    String
  email                   String?  @unique
  phone_number            String?
  additional_phone_number String?
  note                    String?
  isDeleted               Boolean  @default(false)
  createdAt               DateTime @default(now())

  appointments Appointment[]
}

model Vehicle {
  id           Int      @id @default(autoincrement())
  year         Int
  make         String
  model        String
  vehicle_type String
  createdAt    DateTime @default(now())

  appointments Appointment[]
}

model ServicePackage {
  id             Int      @id @default(autoincrement())
  package_name   String
  service        String
  price          Float
  estimated_time Int
  createdAt      DateTime @default(now())

  appointmentServices AppointmentServicePackage[]
}

model Appointment {
  id         Int      @id @default(autoincrement())
  customerId Int
  vehicleId  Int
  date       DateTime
  status     String   @default("pending")
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id])

  vehicle             Vehicle                     @relation(fields: [vehicleId], references: [id])
  appointmentServices AppointmentServicePackage[]
}

model AppointmentServicePackage {
  id               Int @id @default(autoincrement())
  appointmentId    Int
  servicePackageId Int

  appointment    Appointment    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  servicePackage ServicePackage @relation(fields: [servicePackageId], references: [id], onDelete: Cascade)
}
